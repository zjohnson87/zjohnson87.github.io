<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creations on Zachary Johnson</title>
    <link>https://zjohnson87.github.io/projects/creations/</link>
    <description>Recent content in Creations on Zachary Johnson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jan 2020 15:00:28 +0000</lastBuildDate>
    
	<atom:link href="https://zjohnson87.github.io/projects/creations/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Music Features Analysis &amp; Genre Classification</title>
      <link>https://zjohnson87.github.io/projects/creations/music-analysis/</link>
      <pubDate>Tue, 11 Aug 2020 12:41:05 -0500</pubDate>
      
      <guid>https://zjohnson87.github.io/projects/creations/music-analysis/</guid>
      <description>A data analytics project using a music features dataset found on Kaggle. It includes visual analysis of data, summarization of domain-specific terms, feature selection, hyperparameter tuning (using GridSearchCV), and a genre classification model.</description>
    </item>
    
    <item>
      <title>Checkers AI (In Progress)</title>
      <link>https://zjohnson87.github.io/projects/creations/checkers_ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zjohnson87.github.io/projects/creations/checkers_ai/</guid>
      <description>An alpha-beta checkers-playing agent that takes the current game state and makes a legal move based on a heuristic function that evaluates candidate states.</description>
    </item>
    
    <item>
      <title>Pipelined MIPS CPU in VHDL</title>
      <link>https://zjohnson87.github.io/projects/creations/mips-cpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zjohnson87.github.io/projects/creations/mips-cpu/</guid>
      <description>A 5-stage pipeline CPU implementation of MIPS instruction set architecture, including hazard detection, forwarding, flushing, and stalling, all implemented in hardware. Tested using MIPS assembly programs that I wrote, including a MIPS assembly implementation of a Fibonacci number generator. Implemented as a course project with the help of one partner over the course of a half semester.</description>
    </item>
    
  </channel>
</rss>